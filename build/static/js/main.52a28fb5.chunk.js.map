{"version":3,"sources":["pages/TestPage.js","hooks/useParams.js","hooks/useParamsShow.js","hooks/useParamsOverlay.js","hooks/useLocation.js","d3/drawGlobe.js","d3/drawGraticule.js","d3/drawCountries.js","d3/drawStates.js","d3/drawCities.js","d3/drawMarkers.js","d3/drawEvents.js","d3/fadeOut.js","d3/removePaths.js","d3/recenterMap.js","d3/manageMap.js","d3/renderMap.js","components/projections/ProjectionFlat.js","components/world/WorldMap.js","d3/recenterGlobe.js","d3/manageGlobe.js","d3/rotateGlobe.js","d3/renderGlobe.js","components/projections/Projection3D.js","components/world/WorldGlobe.js","components/country/CountryOverview.js","calculate/extractMinMax.js","calculate/buildColorScale.js","components/world/WorldData.js","pages/PlaceModal.js","pages/LoginModal.js","common/PageNavigation.js","graphql/WORLD.js","graphql/WORLD_WITH_DATA.js","pages/WorldPage.js","components/state/StateOverview.js","components/city/CityOverview.js","components/country/CountryData.js","components/country/CountryMap.js","components/country/CountryGlobe.js","graphql/COUNTRY.js","graphql/COUNTRY_WITH_MARKERS.js","pages/CountryPage.js","components/event/parts/EventSummary.js","components/event/parts/EventNumbers.js","components/event/parts/EventTarget.js","components/event/parts/EventWeapons.js","components/event/EventDetails.js","components/state/StateData.js","components/state/StateMap.js","components/state/StateGlobe.js","graphql/STATE.js","graphql/STATE_WITH_EVENTS.js","pages/StatePage.js","components/city/CityData.js","components/city/CityMap.js","components/city/CityGlobe.js","graphql/CITY.js","graphql/CITY_WITH_EVENTS.js","pages/CityPage.js","App.js","serviceWorker.js","index.js"],"names":["WorldPage","useState","value","setValue","open","setOpen","style","height","Fab","color","aria-label","zIndex","position","top","right","AppBar","Toolbar","IconButton","edge","onClick","event","newValue","Typography","variant","flexGrow","Button","SwipeableDrawer","anchor","onClose","List","ListSubheader","disableSticky","ListItem","button","ListItemIcon","ListItemText","primary","selected","secondary","ListItemSecondaryAction","FormControlLabel","control","Checkbox","checked","label","labelPlacement","Divider","maxWidth","Container","disableGutters","width","overflow","border","backgroundColor","BottomNavigation","bottom","onChange","showLabels","BottomNavigationAction","icon","useQuery","URLSearchParams","useLocation","search","useParamsShow","useParams","get","toUpperCase","useParamsOverlay","history","useHistory","show","overlay","location","pathname","nextPath","nextShow","nextOverlay","newPath","newShow","newOverlay","newQuery","toLowerCase","push","drawGlobe","svg","path","select","append","datum","type","attr","drawGraticule","graticule","d3","drawCountries","countries","selectedCountry","onSelection","data","filter","country","outline","map","geoJson","JSON","parse","properties","name","countryName","id","selection","selectAll","d","enter","exit","remove","on","this","iso2Code","drawStates","states","selectedState","state","stateName","drawCities","cities","selectedCity","city","createHexagon","longitude","latitude","size","coordinates","Math","cos","sin","i","PI","drawMarkers","markers","smallMarkers","length","marker","eventCount","rewind","reduce","result","item","undefined","min","max","logScale","domain","colorScale","drawEvents","projection","events","numberKilled","fadeOut","removePaths","recenterMap","scaling","SCALING_RATIO","point","bounds","horizontalScale","verticalScale","newScaling","scale","center","manageMap","manageSVG","scaleExtent","transform","updateTransformations","call","renderMap","targetSVG","translate","ProjectionFlat","props","useRef","window","innerWidth","setWidth","innerHeight","setHeight","updateWidthAndHeight","useEffect","addEventListener","current","className","ref","WorldMap","setLocation","recenterGlobe","SCALING_FACTOR","distance","sqrt","rotate","manageGlobe","d3GeoZoom","northUp","onMove","node","rotateGlobe","config","elapsed","renderGlobe","timer","enableRotation","clipAngle","Projection3D","newTimer","stop","WorldGlobe","useStyles","makeStyles","theme","indicator","fontSize","paddingLeft","spacing","CountryOverview","classes","Box","m","disableElevation","toLocaleString","extractMinMax","list","property","buildColorScale","WorldData","appBar","title","marginLeft","flex","PLACES","gql","PlaceModal","match","setMatch","useLazyQuery","getPlaces","places","Dialog","fullScreen","fullWidth","p","TextField","target","variables","noValidate","autoComplete","autoFocus","placeholder","place","Fragment","countryId","handleChoice","LOGIN","LoginModal","client","useApolloClient","username","setUsername","password","setPassword","handleClickConnect","a","mutate","mutation","then","console","log","resetStore","goto","marginRight","paddingRight","cursor","opacity","focused","Spacer","PageNavigation","viewer","isSearchOpen","setSearchOpen","isLoginOpen","setLoginOpen","isWorldFocused","isCountryFocused","isStateFocused","isCityFocused","isDataFocused","isGlobeFocused","isMapFocused","isNoneFocused","isTerrorismFocused","isAuthenticated","role","handleClickShow","next","handleClickOverlay","LOGOUT","handleClickCShowLogin","handleClickDisconnect","pr","ButtonGroup","disabled","pl","WORLD","WORLD_WITH_DATA","setRotation","query","loading","error","message","display","information","globalMarkers","globalCounts","count","find","overflowClass","padded","margin","padding","StateOverview","CityOverview","CountryData","minStates","maxStates","minCities","maxCities","colorScaleStates","colorScaleCities","pt","CountryGlobe","COUNTRY","COUNTRY_WITH_MARKERS","CountryPage","countryMarkers","countryCounts","CountryMap","EventSummary","additionalNotes","pb","EventNumbers","numberWounded","EventTarget","targetType","targetDetails","EventWeapons","weaponType","weaponDetails","EventDetails","formattedDate","date","format","Date","Card","CardHeader","perpetratorName","subheader","CardContent","CardActions","StateData","StateMap","STATE","STATE_WITH_EVENTS","StatePage","stateId","stringify","StateGlobe","CityData","CityMap","CityGlobe","CITY","CITY_WITH_EVENTS","CityPage","cityId","ApolloClient","uri","process","credentials","App","CssBaseline","TestPage","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.52a28fb5.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\n// import Breadcrumbs from '@material-ui/core/Breadcrumbs'\n// import Link from '@material-ui/core/Link'\n\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport List from '@material-ui/core/List'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport Divider from '@material-ui/core/Divider'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\n// import MailIcon from '@material-ui/icons/Mail'\nimport LocationOnIcon from '@material-ui/icons/LocationOn'\nimport LocationOffIcon from '@material-ui/icons/LocationOff'\nimport GpsFixedIcon from '@material-ui/icons/GpsFixed'\nimport GpsOffIcon from '@material-ui/icons/GpsOff'\nimport ExploreOffIcon from '@material-ui/icons/ExploreOff'\nimport ExploreIcon from '@material-ui/icons/Explore'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\n// import InfoIcon from '@material-ui/icons/Info'\nimport DateRangeIcon from '@material-ui/icons/DateRange'\n\nimport Container from '@material-ui/core/Container'\nimport Fab from '@material-ui/core/Fab'\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff'\n\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport AssignmentIcon from '@material-ui/icons/Assignment'\nimport MapIcon from '@material-ui/icons/Map'\nimport PublicIcon from '@material-ui/icons/Public'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst WorldPage = () => {\n  const [value, setValue] = useState(0)\n  const [open, setOpen] = useState(false)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  const handleOpen = (event, newValue) => {\n    setOpen(true)\n  }\n  const handleClose = (event, newValue) => {\n    setOpen(false)\n  }\n\n  return (\n    <div style={{ height: '100%' }}>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        style={{ zIndex: 999, position: 'absolute', top: 96, right: 32 }}\n      >\n        <VisibilityOffIcon />\n      </Fab>\n      <div style={{ height: 64 }}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleOpen}>\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n              {/* <Link color=\"textSecondary\">World</Link>\n              <span color=\"textSecondary\">&nbsp;/&nbsp;</span>\n              <Link color=\"textSecondary\">United Kingdom</Link>\n              <span color=\"textSecondary\">&nbsp;/&nbsp;</span> */}\n              <span color=\"textPrimary\">London</span>\n            </Typography>\n\n            <IconButton color=\"inherit\" aria-label=\"search\">\n              <SearchIcon />\n            </IconButton>\n            <Button color=\"inherit\" variant=\"outlined\" aria-label=\"login\">\n              Login\n            </Button>\n          </Toolbar>\n          <SwipeableDrawer anchor=\"left\" open={open} onClose={handleClose}>\n            <List>\n              <ListSubheader disableSticky={true}>Overlay Data</ListSubheader>\n\n              <ListItem button>\n                <ListItemIcon>\n                  <LocationOffIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"None\" />\n              </ListItem>\n              <ListItem button selected>\n                <ListItemIcon>\n                  <LocationOnIcon color=\"primary\" />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Wikipedia Terrorism Reports\"\n                  secondary=\"(1970-2021) 3,231 Incidents\"\n                />\n                <ListItemSecondaryAction>\n                  <IconButton>\n                    <DateRangeIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n              <ListItem>\n                <FormControlLabel\n                  value=\"end\"\n                  control={<Checkbox color=\"secondary\" checked />}\n                  label=\"(1970 - 2018) 3,231 Incidents\"\n                  labelPlacement=\"end\"\n                />\n              </ListItem>\n              <ListItem>\n                <FormControlLabel\n                  value=\"end\"\n                  control={<Checkbox color=\"secondary\" />}\n                  label=\"(2000 - 2018) 1,732 Incidents\"\n                  labelPlacement=\"end\"\n                />\n              </ListItem>\n              <ListItem>\n                <FormControlLabel\n                  value=\"end\"\n                  control={<Checkbox color=\"secondary\" />}\n                  label=\"(2015 - 2018) 543 Incidents\"\n                  labelPlacement=\"end\"\n                />\n              </ListItem>\n              <ListItem>\n                <FormControlLabel\n                  value=\"end\"\n                  control={<Checkbox color=\"secondary\" />}\n                  label=\"(2018) 109 Incidents\"\n                  labelPlacement=\"end\"\n                />\n              </ListItem>\n              <ListItem button>\n                <ListItemIcon>\n                  <LocationOnIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Global Terrorism Database\"\n                  secondary=\"(1970-2018) 175,000 Incidents\"\n                />\n              </ListItem>\n\n              <ListItem button>\n                <ListItemIcon>\n                  <LocationOnIcon color=\"inherited\" />\n                </ListItemIcon>\n                <ListItemText primary=\"Voyage Manager Events\" secondary=\"(Last 3 Days) 32 Events\" />\n              </ListItem>\n            </List>\n            <Divider />\n\n            <List>\n              <ListSubheader disableSticky={true}>Overlay People</ListSubheader>\n\n              <ListItem button selected>\n                <ListItemIcon>\n                  <GpsOffIcon color=\"primary\" />\n                </ListItemIcon>\n                <ListItemText primary=\"None\" />\n              </ListItem>\n              <ListItem button>\n                <ListItemIcon>\n                  <GpsFixedIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Current Positions\" secondary=\"23 Collogues\" />\n              </ListItem>\n              <ListItem button>\n                <ListItemIcon>\n                  <GpsFixedIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Current &amp; Future Positions\" secondary=\"23 Collogues\" />\n              </ListItem>\n            </List>\n            <Divider />\n\n            <List>\n              <ListSubheader disableSticky={true}>Display</ListSubheader>\n\n              <ListItem button>\n                <ListItemIcon>\n                  <ExploreIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"All Regions\" />\n              </ListItem>\n\n              <ListItem button selected>\n                <ListItemIcon>\n                  <ExploreOffIcon color=\"primary\" />\n                </ListItemIcon>\n                <ListItemText primary=\"Regions Containing Data\" />\n              </ListItem>\n            </List>\n            <Divider />\n\n            <List style={{ maxWidth: 364 }}>\n              <ListItem>\n                {/* <ListItemIcon>\n                  <MailIcon />\n                </ListItemIcon> */}\n                <ListItemText\n                  primary=\"Due to license restrictions we can not freely share the Global Terrorism Database or Voyage Manager Events\"\n                  secondary=\"If you are a registered user of Voyage Manager please contact our partner for an access instructions\"\n                />\n              </ListItem>\n            </List>\n          </SwipeableDrawer>\n        </AppBar>\n      </div>\n      <div style={{ height: 'calc(100% - 128px)' }}>\n        <Container\n          maxWidth={false}\n          disableGutters\n          style={{\n            height: '100%',\n            width: '100%',\n\n            overflow: 'auto',\n            position: 'relative',\n            border: '10px solid Gainsboro',\n          }}\n        >\n          <div\n            style={{\n              height: '100%',\n              width: '100%',\n              backgroundColor: 'Silver',\n            }}\n          >\n            &nbsp;\n          </div>\n        </Container>\n      </div>\n      <div style={{ height: 64 }}>\n        <BottomNavigation\n          style={{\n            position: 'relative',\n            bottom: 0,\n          }}\n          value={value}\n          onChange={handleChange}\n          showLabels\n        >\n          <BottomNavigationAction label=\"Data\" icon={<AssignmentIcon />} />\n          <BottomNavigationAction label=\"Map\" icon={<MapIcon />} />\n          <BottomNavigationAction label=\"Globe\" icon={<PublicIcon />} />\n        </BottomNavigation>\n      </div>\n    </div>\n  )\n}\n\nexport default WorldPage\n","import { useLocation } from 'react-router-dom'\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default useQuery\n","import useParams from 'hooks/useParams'\n\nconst useParamsShow = () => {\n  const params = useParams()\n\n  const show = params.get('show') || ''\n\n  return show.toUpperCase()\n}\n\nexport default useParamsShow\n","import useParams from 'hooks/useParams'\n\nconst useParamsOverlay = () => {\n  const params = useParams()\n\n  const overlay = params.get('overlay') || ''\n\n  return overlay.toUpperCase()\n}\n\nexport default useParamsOverlay\n","import { useHistory } from 'react-router-dom'\n\nimport useParamsShow from 'hooks/useParamsShow'\nimport useParamsOverlay from 'hooks/useParamsOverlay'\n\nconst useLocation = () => {\n  const history = useHistory()\n\n  const show = useParamsShow()\n  const overlay = useParamsOverlay()\n\n  const location = history.location.pathname + history.location.search\n\n  const setLocation = ({ nextPath, nextShow, nextOverlay }) => {\n    const newPath = nextPath || history.location.pathname\n\n    const newShow = `show=${nextShow || show}`\n    const newOverlay = `overlay=${nextOverlay || overlay}`\n\n    let newQuery = ''\n\n    if (newShow && newOverlay) {\n      newQuery = `?${newShow}&${newOverlay}`\n    } else if (newShow || newOverlay) {\n      newQuery = `?${newShow}${newOverlay}`\n    }\n\n    newQuery = newQuery.toLowerCase()\n\n    history.push(`${newPath}${newQuery}`)\n  }\n\n  return [location, setLocation]\n}\n\nexport default useLocation\n","const drawGlobe = (svg, path) => {\n  svg\n    .select('#map-display-globe')\n    .append('path')\n    .datum({ type: 'Sphere' })\n    .attr('class', 'globe')\n    .attr('d', path)\n}\n\nexport default drawGlobe\n","import * as d3 from 'd3'\n\nconst drawGraticule = (svg, path) => {\n  const graticule = d3.geoGraticule()\n\n  svg\n    .select('#map-display-graticule')\n    .append('path')\n    .datum(graticule())\n    .attr('class', 'graticule')\n    .attr('d', path)\n}\n\nexport default drawGraticule\n","import * as d3 from 'd3'\n\nconst drawCountries = (svg, path, countries, selectedCountry, onSelection) => {\n  if (!countries) {\n    return\n  }\n\n  const data = countries\n    .filter((country) => country.outline)\n    .map((country) => {\n      const geoJson = JSON.parse(country.outline)\n\n      geoJson.properties = {\n        name: country.countryName,\n        id: country.id,\n        type: 'COUNTRY',\n      }\n\n      return geoJson\n    })\n\n  const selection = svg\n    .select('#map-display-countries')\n    .selectAll('path')\n    .data(data, (d) => d.properties.id)\n\n  selection\n    .enter()\n    .append('path')\n    .attr('class', 'country')\n    .attr('fill', 'gainsboro')\n    .attr('stroke', 'DarkSeaGreen')\n    .attr('stroke-opacity', 0.25)\n    .attr('stroke-width', '1px')\n    .attr('d', path)\n\n  selection.exit().remove()\n\n  svg\n    .select('#map-display-countries')\n    .selectAll('path')\n    .on('mouseover', function (event, d) {\n      if (!selectedCountry || selectedCountry.id !== d.properties.id) {\n        d3.select(this).style('fill', 'DarkSeaGreen')\n      }\n    })\n    .on('mouseout', function (event, d) {\n      d3.select(this).style('fill', 'gainsboro')\n    })\n    .on('dblclick', function (event, d) {\n      // d3.event.stopPropagation()\n      if (onSelection) {\n        onSelection({ type: 'COUNTRY', id: d.properties.id, iso2Code: d.properties.iso2Code })\n      }\n    })\n\n  if (selectedCountry) {\n    svg\n      .select('#map-display-countries')\n      .selectAll('path')\n      .attr('opacity', function (d) {\n        if (selectedCountry.id === d.properties.id) {\n          return 0.1\n        }\n        return 0.25\n      })\n  }\n}\n\nexport default drawCountries\n","import * as d3 from 'd3'\n\nconst drawStates = (svg, path, states, selectedState, onSelection) => {\n  if (!states) {\n    return\n  }\n\n  const data = states\n    .filter((state) => state.outline)\n\n    .map((state) => {\n      const geoJson = JSON.parse(state.outline)\n\n      geoJson.properties = {\n        name: state.stateName,\n        id: state.id,\n        type: 'STATE',\n      }\n\n      return geoJson\n    })\n\n  const selection = svg\n    .select('#map-display-states')\n    .selectAll('path')\n    .data(data, (d) => d.properties.id)\n\n  selection\n    .enter()\n    .append('path')\n    .attr('class', 'state')\n    .attr('fill', 'gainsboro')\n    .attr('stroke', 'DarkSeaGreen')\n    .attr('stroke-width', '1px')\n    .attr('d', path)\n\n  selection.exit().remove()\n\n  svg\n    .select('#map-display-states')\n    .selectAll('path')\n    .on('mouseover', function (event, d) {\n      if (!selectedState || selectedState.id !== d.properties.id) {\n        d3.select(this).style('fill', 'DarkSeaGreen')\n      }\n    })\n    .on('mouseout', function (event, d) {\n      d3.select(this).style('fill', 'gainsboro')\n    })\n    .on('dblclick', function (event, d) {\n      // d3.event.stopPropagation()\n\n      if (onSelection) {\n        onSelection({ type: 'STATE', id: d.properties.id, iso2Code: d.properties.iso2Code })\n      }\n    })\n\n  if (selectedState) {\n    svg\n      .select('#map-display-states')\n      .selectAll('path')\n      .attr('opacity', function (d) {\n        if (selectedState.id !== d.properties.id) {\n          return 0.25\n        }\n        return 1.0\n      })\n  }\n}\n\nexport default drawStates\n","import * as d3 from 'd3'\n\nconst drawCities = (svg, path, cities, selectedCity, onSelection) => {\n  if (!cities) {\n    return\n  }\n\n  const data = cities\n    .filter((city) => city.outline)\n\n    .map((city) => {\n      const geoJson = JSON.parse(city.outline)\n\n      geoJson.properties = {\n        name: city.name,\n        id: city.id,\n        type: 'CITY',\n      }\n\n      return geoJson\n    })\n\n  const selection = svg\n    .select('#map-display-cities')\n    .selectAll('path')\n    .data(data, (d) => d.properties.id)\n\n  selection\n    .enter()\n    .append('path')\n    .attr('class', 'city')\n    .attr('fill', 'Peru')\n    .attr('stroke-width', '0px')\n    .attr('opacity', 0.75)\n    .attr('d', path)\n\n  selection.exit().remove()\n\n  svg\n    .select('#map-display-cities')\n    .selectAll('path')\n    .on('mouseover', function (event, d) {\n      if (!selectedCity || selectedCity.id !== d.properties.id) {\n        d3.select(this).style('fill', 'SaddleBrown')\n      }\n    })\n    .on('mouseout', function (event, d) {\n      d3.select(this).style('fill', 'Peru')\n    })\n    // .attr('pointer-events', 'none')\n    .on('dblclick', function (event, d) {\n      // d3.event.stopPropagation()\n      if (onSelection) {\n        onSelection({ type: 'CITY', id: d.properties.id })\n      }\n    })\n\n  if (selectedCity) {\n    svg\n      .select('#map-display-cities')\n      .selectAll('path')\n      .attr('opacity', function (d) {\n        if (selectedCity.id !== d.properties.id) {\n          return 0.15\n        }\n        return 0.25\n      })\n  }\n}\n\nexport default drawCities\n","import * as d3 from 'd3'\nimport rewind from '@mapbox/geojson-rewind'\n\nconst createHexagon = (longitude, latitude, size) => {\n  const coordinates = []\n\n  const numberOfSides = 6\n\n  coordinates.push([longitude + size * Math.cos(0), latitude + size * Math.sin(0)])\n\n  for (let i = 1; i <= numberOfSides; i += 1) {\n    coordinates.push([\n      longitude + size * Math.cos((i * 2 * Math.PI) / numberOfSides),\n      latitude + size * Math.sin((i * 2 * Math.PI) / numberOfSides),\n    ])\n  }\n\n  return [coordinates]\n}\n\nconst drawMarkers = (svg, path, markers, smallMarkers) => {\n  if (!markers || markers.length === 0) {\n    return\n  }\n\n  const size = smallMarkers === true ? 0.05 : 0.5\n\n  const data = markers\n    .filter((marker) => marker.longitude !== null && marker.latitude !== null)\n    .map((marker) => {\n      const geoJson = {\n        type: 'Polygon',\n        coordinates: createHexagon(marker.longitude, marker.latitude, size),\n      }\n\n      geoJson.properties = {\n        eventCount: marker.eventCount,\n        id: marker.id,\n        type: 'marker',\n      }\n\n      return rewind(geoJson, true)\n    })\n\n  const MIN = 0\n  const MAX = 1\n\n  const [min, max] = data.reduce(\n    (result, item) => {\n      const { eventCount } = item.properties || {}\n\n      if (!result[MAX]) {\n        result[MAX] = eventCount\n      }\n      if (!result[MIN]) {\n        result[MIN] = eventCount\n      }\n\n      if (result[MAX] < eventCount) {\n        result[MAX] = eventCount\n      }\n      if (result[MIN] > eventCount) {\n        result[MIN] = eventCount\n      }\n\n      return result\n    },\n    [undefined, undefined]\n  )\n\n  const logScale = d3.scaleLog().domain([min, max])\n\n  const colorScale = d3.scaleSequential((d) => d3.interpolateYlOrRd(logScale(d)))\n\n  const selection = svg\n    .select('#map-display-markers')\n    .selectAll('path')\n    .data(data, (d) => d.id)\n\n  selection\n    .enter()\n    .append('path')\n    .attr('class', 'marker')\n    .attr('fill', (d) => colorScale(d.properties.eventCount))\n    .attr('opacity', 0.8)\n    .attr('pointer-events', 'none')\n    .attr('d', path)\n\n  selection.exit().remove()\n}\n\nexport default drawMarkers\n","// import * as d3 from 'd3'\n// import rewind from '@mapbox/geojson-rewind'\n\nconst drawEvents = (svg, projection, selected, smallMarkers) => {\n  if (!selected || !selected.events || selected.events.length === 0) {\n    return\n  }\n\n  const size = smallMarkers === true ? 10 : 50\n\n  const data = selected.events.filter(\n    (event) => event.longitude !== null && event.latitude !== null\n  )\n\n  const selection = svg\n    .select('#map-display-events')\n    .selectAll('circle')\n    .data(data, (d) => d.id)\n\n  selection\n    .enter()\n    .append('circle')\n    .attr('cx', function (d) {\n      return projection([d.longitude, d.latitude])[0]\n    })\n    .attr('cy', function (d) {\n      return projection([d.longitude, d.latitude])[1]\n    })\n    .attr('r', size)\n    .attr('stroke-width', 1)\n    .attr('fill-opacity', 0.4)\n    .attr('stroke-opacity', 0.8)\n    .attr('fill', (d) => (d.numberKilled > 0 ? 'Crimson' : 'CornflowerBlue'))\n    .attr('stroke', (d) => (d.numberKilled > 0 ? 'Crimson' : 'CornflowerBlue'))\n    .attr('pointer-events', 'none')\n\n  selection.exit().remove()\n}\n\nexport default drawEvents\n","const fadeOut = (svg, markers, states) => {\n  if (markers && markers.length > 0) {\n    if (states && states.length > 0) {\n      svg.select('#map-display-countries').selectAll('path').attr('opacity', 0.1)\n    } else {\n      svg.select('#map-display-countries').selectAll('path').attr('opacity', 0.5)\n    }\n    svg.select('#map-display-states').selectAll('path').attr('opacity', 0.2)\n    svg.select('#map-display-cities').selectAll('path').attr('opacity', 0.2)\n  }\n}\n\nexport default fadeOut\n","const removePaths = (svg) => {\n  svg.selectAll('path').remove()\n  svg.selectAll('circle').remove()\n}\n\nexport default removePaths\n","import * as d3 from 'd3'\n\nconst recenterMap = (selection, scaling, width, height, projection, SCALING_RATIO) => {\n  if (!selection) {\n    return\n  }\n\n  const geoJson = JSON.parse(selection.outline)\n\n  const point = d3.geoCentroid(geoJson)\n  const bounds = d3.geoBounds(geoJson)\n  const horizontalScale = (scaling * width) / (bounds[1][0] - bounds[0][0])\n  const verticalScale = (scaling * height) / (bounds[1][1] - bounds[0][1])\n  const newScaling = horizontalScale < verticalScale ? horizontalScale : verticalScale\n\n  projection.scale(newScaling * SCALING_RATIO).center(point)\n}\n\nexport default recenterMap\n","import * as d3 from 'd3'\n\nfunction updateTransformations(event, svg) {\n  svg\n    .selectAll('path')\n    .attr('vector-effect', 'non-scaling-stroke')\n    .attr('transform', event.transform)\n\n  svg\n    .selectAll('circle')\n    .attr('vector-effect', 'non-scaling-stroke')\n    .attr('transform', event.transform)\n}\n\nconst manageMap = (svg) => {\n  const zoom = (event) => updateTransformations(event, svg)\n\n  const manageSVG = d3.zoom().scaleExtent([0.001, 250]).on('zoom', zoom)\n\n  svg.call(manageSVG)\n}\n\nexport default manageMap\n","import * as d3 from 'd3'\n\nimport drawGlobe from 'd3/drawGlobe'\nimport drawGraticule from 'd3/drawGraticule'\n\nimport drawCountries from 'd3/drawCountries'\nimport drawStates from 'd3/drawStates'\nimport drawCities from 'd3/drawCities'\n\nimport drawMarkers from 'd3/drawMarkers'\nimport drawEvents from 'd3/drawEvents'\n\nimport fadeOut from 'd3/fadeOut'\n\nimport removePaths from 'd3/removePaths'\nimport recenterMap from 'd3/recenterMap'\nimport manageMap from 'd3/manageMap'\n\nconst SCALING_RATIO = 1 / 2.6 / Math.PI\n\nconst renderMap = ({\n  targetSVG,\n  height,\n  width,\n  onSelection,\n  countries,\n  states,\n  cities,\n  markers,\n  selectedCountry,\n  selectedState,\n  selectedCity,\n  smallMarkers,\n}) => {\n  const selected = selectedCity || selectedState || selectedCountry\n\n  const svg = d3.select(targetSVG)\n\n  const scaling = width * SCALING_RATIO\n\n  const projection = d3\n    .geoMercator()\n    .scale(scaling)\n    .translate([width / 2, height / 2])\n\n  const path = d3.geoPath().projection(projection)\n\n  recenterMap(selected, scaling, width, height, projection, SCALING_RATIO)\n\n  removePaths(svg)\n\n  drawGlobe(svg, path)\n  drawGraticule(svg, path)\n\n  drawCountries(svg, path, countries, selectedCountry, onSelection)\n  drawStates(svg, path, states, selectedState, onSelection)\n  drawCities(svg, path, cities, selectedCity, onSelection)\n\n  drawMarkers(svg, path, markers, smallMarkers)\n\n  drawEvents(svg, projection, selected, smallMarkers)\n\n  fadeOut(svg, markers, states)\n\n  manageMap(svg)\n}\n\nexport default renderMap\n","import React, { useState, useRef, useEffect } from 'react'\n\nimport renderMap from 'd3/renderMap'\n\nconst ProjectionFlat = (props) => {\n  const {\n    countries,\n    markers,\n    selectedCountry,\n    selectedState,\n    selectedCity,\n    onSelection,\n    smallMarkers,\n  } = props\n\n  const targetSVG = useRef(null)\n\n  const [width, setWidth] = useState(window.innerWidth)\n  const [height, setHeight] = useState(window.innerHeight)\n\n  const updateWidthAndHeight = () => {\n    setWidth(window.innerWidth)\n    setHeight(window.innerHeight - 64)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', updateWidthAndHeight)\n\n    updateWidthAndHeight()\n\n    const states = selectedCountry ? selectedCountry.states : undefined\n    const cities = selectedCountry ? selectedCountry.cities : undefined\n\n    renderMap({\n      targetSVG: targetSVG.current,\n      height,\n      width,\n      onSelection,\n      countries,\n      markers,\n      states,\n      cities,\n      selectedCountry,\n      selectedState,\n      selectedCity,\n      smallMarkers,\n    })\n  })\n\n  return (\n    <svg className=\"ProjectionFlat\" ref={targetSVG} width={width} height={height}>\n      <g id=\"map-display-globe\" />\n      <g id=\"map-display-graticule\" />\n      <g id=\"map-display-countries\" />\n      <g id=\"map-display-states\" />\n      <g id=\"map-display-cities\" />\n\n      <g id=\"map-display-markers\" />\n      <g id=\"map-display-events\" />\n    </svg>\n  )\n}\n\nexport default ProjectionFlat\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport ProjectionFlat from 'components/projections/ProjectionFlat'\n\nconst WorldMap = (props) => {\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (country) => {\n    setLocation({ nextPath: `/country/${country.id}` })\n  }\n\n  return (\n    <div className=\"WorldMap\">\n      <ProjectionFlat {...props} onSelection={handleSelection} />\n    </div>\n  )\n}\n\nexport default WorldMap\n","import * as d3 from 'd3'\n\nconst recenterGlobe = (selection, width, height, projection, SCALING_FACTOR) => {\n  if (!selection) {\n    return\n  }\n\n  const geoJson = JSON.parse(selection.outline)\n\n  const point = d3.geoCentroid(geoJson)\n  const bounds = d3.geoBounds(geoJson)\n  const distance = d3.geoDistance(bounds[0], bounds[1])\n  const newScaling = Math.max(height, width) / distance / Math.sqrt(SCALING_FACTOR)\n\n  projection.rotate([-point[0], -point[1]])\n\n  projection.scale(newScaling)\n}\n\nexport default recenterGlobe\n","// import * as d3 from 'd3'\nimport d3GeoZoom from 'd3-geo-zoom'\n\nconst updateTransformations = (event, svg, path) => {\n  svg.selectAll('path').attr('d', path)\n  svg.selectAll('circle').attr('transform', event.transform)\n}\n\nconst manageGlobe = (svg, projection, path) => {\n  const zoom = d3GeoZoom()\n\n  const move = (event) => updateTransformations(event, svg, path)\n\n  const manageSVG = zoom.projection(projection).northUp(true).onMove(move)\n\n  manageSVG(svg.node())\n}\n\nexport default manageGlobe\n","import * as d3 from 'd3'\n\nconst rotateGlobe = (svg, projection, path) => {\n  const config = {\n    speed: 0.005,\n    verticalTilt: -15,\n    horizontalTilt: 0,\n  }\n\n  const timer = d3.timer(function (elapsed) {\n    projection.rotate([\n      -1 * (config.speed * elapsed - 500),\n      config.verticalTilt,\n      config.horizontalTilt,\n    ])\n    svg.selectAll('path').attr('d', path)\n  })\n\n  return timer\n}\n\nexport default rotateGlobe\n","import * as d3 from 'd3'\n\nimport drawGlobe from 'd3/drawGlobe'\nimport drawGraticule from 'd3/drawGraticule'\n\nimport drawCountries from 'd3/drawCountries'\nimport drawStates from 'd3/drawStates'\nimport drawCities from 'd3/drawCities'\n\nimport drawMarkers from 'd3/drawMarkers'\nimport drawEvents from 'd3/drawEvents'\n\nimport fadeOut from 'd3/fadeOut'\nimport removePaths from 'd3/removePaths'\nimport recenterGlobe from 'd3/recenterGlobe'\nimport manageGlobe from 'd3/manageGlobe'\nimport rotateGlobe from 'd3/rotateGlobe'\n\nconst MARGIN = 20\n\nconst SCALING_FACTOR = 2.8\n\nconst renderGlobe = ({\n  targetSVG,\n  height,\n  width,\n  onSelection,\n  countries,\n  states,\n  cities,\n  markers,\n  selectedCountry,\n  selectedState,\n  selectedCity,\n  smallMarkers,\n  enableRotation,\n}) => {\n  const selected = selectedCity || selectedState || selectedCountry\n\n  const svg = d3.select(targetSVG)\n\n  const scaling = Math.min(width, height) / 2 - MARGIN\n\n  const projection = d3\n    .geoOrthographic()\n    .translate([width / 2, height / 2])\n    .scale(scaling)\n    .clipAngle(90)\n\n  const path = d3.geoPath().projection(projection)\n\n  let timer\n\n  recenterGlobe(selected, width, height, projection, SCALING_FACTOR)\n\n  removePaths(svg)\n\n  drawGlobe(svg, path)\n  drawGraticule(svg, path)\n\n  drawCountries(svg, path, countries, selectedCountry, onSelection)\n\n  drawStates(svg, path, states, selectedState, onSelection)\n  drawCities(svg, path, cities, selectedCity, onSelection)\n\n  drawMarkers(svg, path, markers, smallMarkers)\n\n  drawEvents(svg, projection, selected, smallMarkers)\n\n  fadeOut(svg, markers, states)\n\n  manageGlobe(svg, projection, path)\n\n  if (enableRotation === true) {\n    timer = rotateGlobe(svg, projection, path)\n  }\n\n  return timer\n}\n\nexport default renderGlobe\n","import React, { useState, useRef, useEffect } from 'react'\n\nimport renderGlobe from 'd3/renderGlobe'\n\nconst Projection3D = (props) => {\n  const { selectedCountry } = props\n\n  const targetSVG = useRef(null)\n\n  const [width, setWidth] = useState(window.innerWidth)\n  const [height, setHeight] = useState(window.innerHeight)\n\n  const updateWidthAndHeight = () => {\n    setWidth(window.innerWidth)\n    setHeight(window.innerHeight - 64)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', updateWidthAndHeight)\n\n    updateWidthAndHeight()\n\n    const states = selectedCountry ? selectedCountry.states : undefined\n    const cities = selectedCountry ? selectedCountry.cities : undefined\n\n    const newTimer = renderGlobe({\n      targetSVG: targetSVG.current,\n      height,\n      width,\n      states,\n      cities,\n      ...props,\n    })\n\n    return () => {\n      if (newTimer) {\n        newTimer.stop()\n      }\n    }\n  })\n\n  return (\n    <svg className=\"Projection3D\" ref={targetSVG} width={width} height={height}>\n      <g id=\"map-display-globe\" />\n      <g id=\"map-display-graticule\" />\n      <g id=\"map-display-countries\" />\n      <g id=\"map-display-states\" />\n      <g id=\"map-display-cities\" />\n\n      <g id=\"map-display-markers\" />\n      <g id=\"map-display-events\" />\n    </svg>\n  )\n}\n\nexport default Projection3D\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Projection3D from 'components/projections/Projection3D'\n\nimport 'css/WorldGlobe.css'\n\nconst WorldGlobe = (props) => {\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (country) => {\n    setLocation({ nextPath: `/country/${country.id}` })\n  }\n\n  return (\n    <div className=\"worldGlobe\">\n      <Projection3D {...props} onSelection={handleSelection} />\n    </div>\n  )\n}\n\nexport default WorldGlobe\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport 'css/CountryOverview.css'\n\nconst useStyles = makeStyles((theme) => ({\n  indicator: {\n    fontSize: 'x-small',\n    paddingLeft: theme.spacing(2),\n  },\n}))\n\nconst CountryOverview = (props) => {\n  const { country, colorScale } = props\n  const { name, eventCount } = country\n\n  const setLocation = useLocation()[1]\n  const classes = useStyles()\n\n  const color = colorScale(country.eventCount)\n  const style = { color }\n\n  const handleClick = () => {\n    setLocation({ nextPath: `/country/${country.id}` })\n  }\n\n  return (\n    <div className=\"CountryOverview\">\n      <Box m={1}>\n        <Button variant=\"outlined\" color=\"primary\" disableElevation onClick={handleClick}>\n          <span>{name}</span>\n          {eventCount && (\n            <span className={classes.indicator} style={style}>\n              {eventCount ? eventCount.toLocaleString() : ''}\n            </span>\n          )}\n        </Button>\n      </Box>\n    </div>\n  )\n}\n\nCountryOverview.propTypes = {\n  country: PropTypes.object.isRequired,\n  colorScale: PropTypes.func.isRequired,\n  onSelection: PropTypes.func.isRequired,\n}\n\nexport default CountryOverview\n","const extractMinMax = (list, property) => {\n  return list.reduce(\n    (result, item) => {\n      const value = item[property]\n\n      if (!result[0]) {\n        result[0] = value\n      }\n      if (!result[1]) {\n        result[1] = value\n      }\n\n      if (result[0] > value) {\n        result[0] = value\n      }\n      if (result[1] < value) {\n        result[1] = value\n      }\n\n      return result\n    },\n    [undefined, undefined]\n  )\n}\n\nexport default extractMinMax\n","import * as d3 from 'd3'\n\nconst buildColorScale = (min, max) => {\n  const logScale = d3.scaleLog().domain([min, max])\n\n  const colorScale = d3.scaleSequential((d) => d3.interpolateYlOrRd(logScale(d)))\n\n  return colorScale\n}\n\nexport default buildColorScale\n","import React from 'react'\n\nimport CountryOverview from 'components/country/CountryOverview'\n\nimport extractMinMax from 'calculate/extractMinMax'\nimport buildColorScale from 'calculate/buildColorScale'\n\nconst WorldData = (props) => {\n  const { countries } = props\n\n  const [min, max] = extractMinMax(countries, 'eventCount')\n\n  const colorScale = buildColorScale(min, max)\n\n  return (\n    <div className=\"WorldData\">\n      {countries.map((country) => (\n        <CountryOverview key={country.id} country={country} colorScale={colorScale} />\n      ))}\n    </div>\n  )\n}\n\nexport default WorldData\n","import React, { useState } from 'react'\nimport { gql } from 'apollo-boost'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Box from '@material-ui/core/Box'\nimport Dialog from '@material-ui/core/Dialog'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItem from '@material-ui/core/ListItem'\nimport List from '@material-ui/core/List'\nimport Divider from '@material-ui/core/Divider'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport CloseIcon from '@material-ui/icons/Close'\nimport TextField from '@material-ui/core/TextField'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}))\n\nconst PLACES = gql`\n  query places($match: String!) {\n    places(match: $match) {\n      id\n      name\n      countryName\n      countryId\n      displayOrder\n      type\n    }\n  }\n`\n\nconst PlaceModal = (props) => {\n  const { open, onClose } = props\n\n  const [match, setMatch] = useState(null)\n\n  const classes = useStyles()\n  const setLocation = useLocation()[1]\n\n  const [getPlaces, { data }] = useLazyQuery(PLACES)\n\n  const handleChange = (event) => {\n    const match = event.target.value\n\n    setMatch(match)\n\n    if (match && match.length >= 3) {\n      getPlaces({\n        variables: { match },\n      })\n    }\n  }\n\n  const handleChoice = (place) => {\n    onClose()\n\n    let nextPath\n\n    if (place.type === 'COUNTRY') {\n      nextPath = `/country/${place.id}`\n    } else if (place.type === 'STATE') {\n      nextPath = `/country/${place.countryId}/state/${place.id}`\n    } else if (place.type === 'CITY') {\n      nextPath = `/country/${place.countryId}/city/${place.id}`\n    }\n\n    setLocation({ nextPath })\n  }\n\n  const { places } = data || {}\n\n  return (\n    <div>\n      <Dialog fullScreen fullWidth maxWidth=\"md\" open={open} onClose={onClose}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Find Place\n            </Typography>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={onClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Box p={2}>\n          <TextField\n            value={match}\n            onChange={handleChange}\n            variant=\"outlined\"\n            noValidate\n            autoComplete=\"off\"\n            fullWidth\n            autoFocus\n            placeholder=\"Type a Country, State, or City\"\n          />\n        </Box>\n        {places && (\n          <List>\n            {places.map((place) => (\n              <React.Fragment>\n                <ListItem button onClick={() => handleChoice(place)}>\n                  <ListItemText primary={place.name} secondary={place.countryName} />\n                </ListItem>\n                <Divider />\n              </React.Fragment>\n            ))}\n          </List>\n        )}\n      </Dialog>\n    </div>\n  )\n}\n\nexport default PlaceModal\n","import React, { useState } from 'react'\nimport { gql } from 'apollo-boost'\nimport { useApolloClient } from '@apollo/react-hooks'\n\nimport Box from '@material-ui/core/Box'\nimport Dialog from '@material-ui/core/Dialog'\n\nimport Button from '@material-ui/core/Button'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport CloseIcon from '@material-ui/icons/Close'\nimport TextField from '@material-ui/core/TextField'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst LOGIN = gql`\n  mutation LOGIN($username: String, $password: String) {\n    login(username: $username, password: $password) {\n      id\n      role\n      session\n    }\n  }\n`\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}))\n\nconst LoginModal = (props) => {\n  const { open, onClose } = props\n\n  const client = useApolloClient()\n\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleUsernameChange = (event) => {\n    setUsername(event.target.value)\n  }\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value)\n  }\n\n  const handleClickConnect = async () => {\n    await client\n      .mutate({ mutation: LOGIN, variables: { username, password } })\n      .then((result) => console.log(result))\n    await client.resetStore()\n\n    onClose()\n  }\n\n  const classes = useStyles()\n\n  return (\n    <div>\n      <Dialog maxWidth=\"md\" open={open} onClose={onClose}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Login\n            </Typography>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={onClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Box p={2}>\n          <TextField\n            value={username}\n            variant=\"outlined\"\n            noValidate\n            autoComplete=\"off\"\n            fullWidth\n            autoFocus\n            placeholder=\"UserName\"\n            onChange={handleUsernameChange}\n          />\n        </Box>\n        <Box p={2}>\n          <TextField\n            value={password}\n            variant=\"outlined\"\n            noValidate\n            autoComplete=\"off\"\n            fullWidth\n            autoFocus\n            placeholder=\"Password\"\n            type=\"password\"\n            onChange={handlePasswordChange}\n          />\n        </Box>\n        <Box p={2}>\n          <Button variant=\"contained\" color=\"primary\" disableElevation onClick={handleClickConnect}>\n            Connect To Terrorism Database\n          </Button>\n        </Box>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default LoginModal\n","import React, { useState } from 'react'\nimport { gql } from 'apollo-boost'\nimport { useApolloClient } from '@apollo/react-hooks'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Box from '@material-ui/core/Box'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nimport LockIcon from '@material-ui/icons/Lock'\nimport LockOpenIcon from '@material-ui/icons/LockOpen'\nimport SearchIcon from '@material-ui/icons/Search'\n\nimport useLocation from 'hooks/useLocation'\n\nimport PlaceModal from 'pages/PlaceModal'\nimport LoginModal from 'pages/LoginModal'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  goto: {\n    marginRight: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    cursor: 'pointer',\n    opacity: 0.75,\n  },\n  focused: {\n    marginRight: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n}))\n\nconst Spacer = () => <div style={{ flexGrow: 1 }}></div>\n\nconst PageNavigation = (props) => {\n  const { viewer, show, overlay, country, state, city } = props\n\n  const setLocation = useLocation()[1]\n  const classes = useStyles()\n\n  const [isSearchOpen, setSearchOpen] = useState(false)\n  const [isLoginOpen, setLoginOpen] = useState(false)\n\n  const isWorldFocused = country === undefined\n  const isCountryFocused = country !== undefined && state === undefined && city === undefined\n  const isStateFocused = state !== undefined\n  const isCityFocused = city !== undefined\n\n  const isDataFocused = show === 'DATA' || show === '' || show === undefined\n  const isGlobeFocused = show === 'GLOBE'\n  const isMapFocused = show === 'MAP'\n\n  const isNoneFocused = overlay === 'NONE' || overlay === '' || overlay === undefined\n  const isTerrorismFocused = overlay === 'TERRORISM'\n\n  const isAuthenticated = viewer && viewer.role && viewer.role === 'AUTHENTICATED'\n\n  const handleClickWorld = () => {\n    setLocation({ nextPath: `/world` })\n  }\n\n  const handleClickCountry = () => {\n    setLocation({ nextPath: `/country/${country.id}` })\n  }\n\n  const handleClickShow = (next) => {\n    setLocation({ nextShow: next })\n  }\n  const handleClickShowGlobe = () => handleClickShow('GLOBE')\n  const handleClickShowMap = () => handleClickShow('MAP')\n  const handleClickShowData = () => handleClickShow('DATA')\n\n  const handleClickOverlay = (next) => {\n    setLocation({ nextOverlay: next })\n  }\n  const handleClickOverlayNone = () => handleClickOverlay('NONE')\n  const handleClickOverlayTerrorism = () => handleClickOverlay('TERRORISM')\n\n  const handleClickFind = () => {\n    setSearchOpen(true)\n  }\n\n  const handleSearchClose = () => {\n    setSearchOpen(false)\n  }\n\n  const handleLoginClose = () => {\n    setLoginOpen(false)\n  }\n\n  const LOGOUT = gql`\n    mutation LOGOUT {\n      logout {\n        id\n        role\n        session\n      }\n    }\n  `\n\n  const client = useApolloClient()\n\n  const handleClickCShowLogin = async () => {\n    setLoginOpen(true)\n  }\n\n  const handleClickDisconnect = async () => {\n    await client.mutate({ mutation: LOGOUT }).then((result) => console.log(result))\n    await client.resetStore()\n  }\n\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleClickFind}>\n          <SearchIcon />\n        </IconButton>\n        <Typography\n          className={isWorldFocused ? classes.focused : classes.goto}\n          variant=\"h6\"\n          onClick={handleClickWorld}\n        >\n          World\n        </Typography>\n        {country && (\n          <Typography\n            className={isCountryFocused ? classes.focused : classes.goto}\n            variant=\"h6\"\n            onClick={handleClickCountry}\n          >\n            &nbsp; {country.name}\n          </Typography>\n        )}\n        {state && (\n          <Typography className={isStateFocused ? classes.focused : classes.goto} variant=\"h6\">\n            &nbsp; {state.name}\n          </Typography>\n        )}\n        &nbsp;\n        {city && (\n          <Typography className={isCityFocused ? classes.focused : classes.goto} variant=\"h6\">\n            {city.name}\n          </Typography>\n        )}\n        <Spacer />\n        <Box pr={2}>\n          <Typography color=\"textSecondary\">Show</Typography>\n        </Box>\n        <ButtonGroup variant=\"outlined\" disableElevation>\n          <Button disabled={isDataFocused === true} onClick={handleClickShowData}>\n            Data\n          </Button>\n          <Button disabled={isMapFocused === true} onClick={handleClickShowMap}>\n            Map\n          </Button>\n          <Button disabled={isGlobeFocused === true} onClick={handleClickShowGlobe}>\n            Globe\n          </Button>\n        </ButtonGroup>\n        <Box pr={2} pl={4}>\n          <Typography color=\"textSecondary\">Overlay</Typography>\n        </Box>\n        <ButtonGroup variant=\"outlined\" disableElevation>\n          <Button disabled={isNoneFocused === true} onClick={handleClickOverlayNone}>\n            None\n          </Button>\n          <Button disabled={isTerrorismFocused === true} onClick={handleClickOverlayTerrorism}>\n            Terrorism\n          </Button>\n        </ButtonGroup>\n        {/* <Button onClick={handleClickConnect}>Login</Button>\n        <Button onClick={handleClickDisconnect}>Logout</Button> */}\n        {isAuthenticated ? (\n          <IconButton edge=\"end\" aria-label=\"menu\" onClick={handleClickDisconnect}>\n            <LockOpenIcon />\n          </IconButton>\n        ) : (\n          <IconButton edge=\"end\" color=\"inherit\" aria-label=\"menu\" onClick={handleClickCShowLogin}>\n            <LockIcon />\n          </IconButton>\n        )}\n      </Toolbar>\n      <PlaceModal open={isSearchOpen} onClose={handleSearchClose} />\n      <LoginModal open={isLoginOpen} onClose={handleLoginClose} />\n    </AppBar>\n  )\n}\n\nexport default PageNavigation\n","import { gql } from 'apollo-boost'\n\nconst WORLD = gql`\n  query WORLD {\n    viewer {\n      id\n      role\n    }\n    information {\n      countries {\n        id\n        name\n        iso3Code\n        iso2Code\n        outline\n      }\n    }\n  }\n`\n\nexport default WORLD\n","import { gql } from 'apollo-boost'\n\nconst WORLD_WITH_DATA = gql`\n  query WORLD_WITH_DATA {\n    viewer {\n      id\n      role\n\n      globalMarkers {\n        id\n        latitude\n        longitude\n        eventCount\n      }\n\n      globalCounts {\n        id\n        eventCount\n      }\n    }\n\n    information {\n      countries {\n        id\n        name\n        iso3Code\n        iso2Code\n        outline\n      }\n    }\n  }\n`\n\nexport default WORLD_WITH_DATA\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\n\nimport WorldMap from 'components/world/WorldMap'\nimport WorldGlobe from 'components/world/WorldGlobe'\nimport WorldData from 'components/world/WorldData'\n\nimport PageNavigation from 'common/PageNavigation'\n\nimport useParamsShow from 'hooks/useParamsShow'\nimport useParamsOverlay from 'hooks/useParamsOverlay'\n\nimport WORLD from 'graphql/WORLD'\nimport WORLD_WITH_DATA from 'graphql/WORLD_WITH_DATA'\n\nimport 'css/WorldPage.css'\n\nconst WorldPage = () => {\n  const [enableRotation, setRotation] = useState(false)\n\n  const show = useParamsShow()\n  const overlay = useParamsOverlay()\n\n  const query = overlay === 'TERRORISM' ? WORLD_WITH_DATA : WORLD\n\n  const { loading, error, data } = useQuery(query)\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :( {error.message}</p>\n\n  const { viewer, information } = data\n  const { globalMarkers, globalCounts } = viewer || {}\n  const { countries } = information\n\n  if (globalCounts) {\n    for (const count of globalCounts) {\n      const country = countries.find((item) => item.id === count.id)\n\n      if (country) {\n        country.eventCount = count.eventCount\n      }\n    }\n  }\n\n  let display\n\n  if (show === 'MAP') {\n    display = <WorldMap countries={countries} markers={globalMarkers} />\n  } else if (show === 'GLOBE') {\n    display = (\n      <WorldGlobe countries={countries} markers={globalMarkers} enableRotation={enableRotation} />\n    )\n  } else {\n    display = <WorldData countries={countries} />\n  }\n\n  const handleRotation = () => {\n    const nextRotation = !enableRotation\n    setRotation(nextRotation)\n  }\n\n  const overflowClass = show === 'MAP' || show === 'GLOBE' ? 'overflow-hidden' : ''\n\n  return (\n    <Box className={'WorldPage full-page ' + overflowClass}>\n      {show === 'GLOBE' && (\n        <div style={{ position: 'absolute', bottom: 24, right: 24 }}>\n          <Button onClick={handleRotation}>Rotate {enableRotation}</Button>\n        </div>\n      )}\n      <PageNavigation show={show} overlay={overlay} viewer={viewer} />\n      <Container className=\"fill-area\" maxWidth={false} disableGutters>\n        {display}\n      </Container>\n    </Box>\n  )\n}\n\nexport default WorldPage\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  padded: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  indicator: {\n    fontSize: 'x-small',\n    paddingLeft: theme.spacing(2),\n  },\n}))\n\nconst StateOverview = (props) => {\n  const { country, state, colorScale } = props\n  const { name, id, eventCount } = state\n  const { id: countryId } = country\n\n  const setLocation = useLocation()[1]\n  const classes = useStyles()\n\n  const color = colorScale(state.eventCount)\n  const style = { color }\n\n  const handleClick = () => {\n    setLocation({ nextPath: `/country/${countryId}/state/${id}` })\n  }\n\n  return (\n    <Button\n      className={classes.padded}\n      variant=\"outlined\"\n      color=\"primary\"\n      disableElevation\n      onClick={handleClick}\n    >\n      <span>{name}</span>\n      {eventCount && (\n        <span className={classes.indicator} style={style}>\n          {eventCount ? eventCount.toLocaleString() : ''}\n        </span>\n      )}\n    </Button>\n  )\n}\n\nexport default StateOverview\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  padded: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  indicator: {\n    fontSize: 'x-small',\n    paddingLeft: theme.spacing(2),\n  },\n}))\n\nconst CityOverview = (props) => {\n  const { city, country, colorScale } = props\n  const { name, id, eventCount } = city\n  const { id: countryId } = country\n\n  const classes = useStyles()\n  const setLocation = useLocation()[1]\n\n  const color = colorScale(city.eventCount)\n  const style = { color }\n\n  const handleClick = () => {\n    setLocation({ nextPath: `/country/${countryId}/city/${id}` })\n  }\n\n  return (\n    <Button\n      className={classes.padded}\n      variant=\"outlined\"\n      color=\"primary\"\n      disableElevation\n      onClick={handleClick}\n    >\n      <span>{name}</span>\n      {eventCount && (\n        <span className={classes.indicator} style={style}>\n          {eventCount ? eventCount.toLocaleString() : ''}\n        </span>\n      )}\n    </Button>\n  )\n}\n\nexport default CityOverview\n","import React from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport StateOverview from 'components/state/StateOverview'\nimport CityOverview from 'components/city/CityOverview'\n\nimport extractMinMax from 'calculate/extractMinMax'\nimport buildColorScale from 'calculate/buildColorScale'\n\nconst CountryData = (props) => {\n  const { country, states, cities } = props\n\n  const [minStates, maxStates] = extractMinMax(states, 'eventCount')\n  const [minCities, maxCities] = extractMinMax(cities, 'eventCount')\n\n  const colorScaleStates = buildColorScale(minStates, maxStates)\n  const colorScaleCities = buildColorScale(minCities, maxCities)\n\n  return (\n    <div className=\"CountryData\">\n      <Box pl={1} pt={3}>\n        <Typography variant=\"h4\" color=\"primary\">\n          States\n        </Typography>\n      </Box>\n      {states.map((state) => (\n        <StateOverview\n          key={state.id}\n          country={country}\n          state={state}\n          colorScale={colorScaleStates}\n        />\n      ))}\n      <Box pl={1} pt={3}>\n        <Typography variant=\"h4\" color=\"primary\">\n          Cities\n        </Typography>\n      </Box>\n      {cities.map((city) => (\n        <CityOverview key={city.id} country={country} city={city} colorScale={colorScaleCities} />\n      ))}\n    </div>\n  )\n}\n\nexport default CountryData\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport ProjectionFlat from 'components/projections/ProjectionFlat'\n\nconst CountryGlobe = (props) => {\n  const { selectedCountry } = props\n\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (target) => {\n    let nextPath\n\n    if (target.type === 'COUNTRY') {\n      nextPath = `/country/${target.id}`\n    } else if (target.type === 'STATE') {\n      nextPath = `/country/${selectedCountry.id}/state/${target.id}`\n    } else if (target.type === 'CITY') {\n      nextPath = `/country/${selectedCountry.id}/city/${target.id}`\n    }\n\n    setLocation({ nextPath })\n  }\n\n  return (\n    <React.Fragment>\n      <ProjectionFlat {...props} onSelection={handleSelection} smallMarkers={true} />\n    </React.Fragment>\n  )\n}\n\nexport default CountryGlobe\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Projection3D from 'components/projections/Projection3D'\n\nconst CountryGlobe = (props) => {\n  const { selectedCountry } = props\n\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (target) => {\n    let nextPath\n\n    if (target.type === 'COUNTRY') {\n      nextPath = `/country/${target.id}`\n    } else if (target.type === 'STATE') {\n      nextPath = `/country/${selectedCountry.id}/state/${target.id}`\n    } else if (target.type === 'CITY') {\n      nextPath = `/country/${selectedCountry.id}/city/${target.id}`\n    }\n\n    setLocation({ nextPath })\n  }\n\n  return (\n    <React.Fragment>\n      <Projection3D {...props} onSelection={handleSelection} smallMarkers={true} />\n    </React.Fragment>\n  )\n}\n\nexport default CountryGlobe\n","import { gql } from 'apollo-boost'\n\nconst COUNTRY = gql`\n  query COUNTRY($countryId: ID) {\n    viewer {\n      id\n      role\n    }\n    information {\n      countries {\n        id\n        name\n        iso3Code\n        iso2Code\n        outline\n      }\n\n      country(id: $countryId) {\n        id\n        name\n\n        outline\n\n        states {\n          id\n          name\n          hascCode\n\n          outline\n        }\n\n        cities {\n          id\n          name\n\n          outline\n        }\n      }\n    }\n  }\n`\n\nexport default COUNTRY\n","import { gql } from 'apollo-boost'\n\nconst COUNTRY_WITH_MARKERS = gql`\n  query COUNTRY_WITH_MARKERS($countryId: ID) {\n    viewer {\n      id\n      role\n\n      countryCounts(id: $countryId) {\n        id\n        eventCount\n      }\n\n      countryMarkers(id: $countryId) {\n        id\n        latitude\n        longitude\n        eventCount\n      }\n    }\n\n    information {\n      countries {\n        id\n        name\n        iso3Code\n        iso2Code\n        outline\n      }\n\n      country(id: $countryId) {\n        id\n        name\n\n        outline\n\n        states {\n          id\n          name\n          hascCode\n\n          outline\n        }\n\n        cities {\n          id\n          name\n\n          outline\n        }\n      }\n    }\n  }\n`\n\nexport default COUNTRY_WITH_MARKERS\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useParams } from 'react-router-dom'\n\nimport Box from '@material-ui/core/Box'\nimport Container from '@material-ui/core/Container'\n\nimport PageNavigation from 'common/PageNavigation'\n\nimport CountryData from 'components/country/CountryData'\nimport CountryMap from 'components/country/CountryMap'\nimport CountryGlobe from 'components/country/CountryGlobe'\n\nimport useParamsShow from 'hooks/useParamsShow'\nimport useParamsOverlay from 'hooks/useParamsOverlay'\n\nimport COUNTRY from 'graphql/COUNTRY'\nimport COUNTRY_WITH_MARKERS from 'graphql/COUNTRY_WITH_MARKERS'\n\nconst CountryPage = () => {\n  const { countryId } = useParams()\n\n  const show = useParamsShow()\n  const overlay = useParamsOverlay()\n\n  const query = overlay === 'TERRORISM' ? COUNTRY_WITH_MARKERS : COUNTRY\n\n  const { loading, error, data } = useQuery(query, {\n    variables: { countryId },\n  })\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :( </p>\n\n  const { viewer, information } = data\n\n  const { countryMarkers, countryCounts } = viewer || {}\n  const { countries, country } = information\n\n  const states = country.states || []\n  const cities = country.cities || []\n\n  if (countryCounts) {\n    for (const count of countryCounts) {\n      const state = states.find((item) => item.id === count.id)\n      const city = cities.find((item) => item.id === count.id)\n\n      if (state) {\n        state.eventCount = count.eventCount\n      } else if (city) {\n        city.eventCount = count.eventCount\n      }\n    }\n  }\n\n  let display\n\n  if (show === 'MAP') {\n    display = (\n      <CountryMap\n        countries={countries}\n        selectedCountry={country}\n        states={states}\n        cities={cities}\n        markers={countryMarkers}\n      />\n    )\n  } else if (show === 'GLOBE') {\n    display = (\n      <CountryGlobe\n        countries={countries}\n        selectedCountry={country}\n        states={states}\n        cities={cities}\n        markers={countryMarkers}\n      />\n    )\n  } else {\n    display = <CountryData country={country} states={states} cities={cities} />\n  }\n\n  return (\n    <Box className=\"CountryPage full-page\">\n      <PageNavigation show={show} overlay={overlay} country={country} />\n      <Container className=\"fill-area\" maxWidth={false} disableGutters>\n        {display}\n      </Container>\n    </Box>\n  )\n}\n\nexport default CountryPage\n","import React from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nconst EventSummary = (props) => {\n  const { event } = props\n  const { additionalNotes } = event\n\n  return (\n    <Box pb={1}>\n      <Typography variant=\"body2\">{additionalNotes}</Typography>\n    </Box>\n  )\n}\n\nexport default EventSummary\n","import React from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nconst EventNumbers = (props) => {\n  const { event } = props\n  const { numberKilled, numberWounded } = event\n\n  return (\n    <Box pb={1}>\n      <Typography variant=\"caption\" display=\"inline\">\n        <span>Killed: </span>\n        <span>{numberKilled}</span>\n      </Typography>\n      <span>&nbsp;</span>\n      <Typography variant=\"caption\" display=\"inline\">\n        <span>Wounded: </span>\n        <span>{numberWounded}</span>\n      </Typography>\n    </Box>\n  )\n}\n\nexport default EventNumbers\n","import React from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nconst EventTarget = (props) => {\n  const { event } = props\n  const { targetType, targetDetails } = event\n\n  return (\n    <Box pb={1}>\n      <Typography variant=\"caption\" display=\"inline\">\n        <span>Target: </span>\n      </Typography>\n      <Typography variant=\"body2\" display=\"inline\" color=\"primary\">\n        <span>{targetType}</span>\n      </Typography>\n      <Typography variant=\"caption\" display=\"inline\">\n        <span> {targetDetails}</span>\n      </Typography>\n    </Box>\n  )\n}\n\nexport default EventTarget\n","import React from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nconst EventWeapons = (props) => {\n  const { event } = props\n  const { weaponType, weaponDetails } = event\n\n  return (\n    <React.Fragment>\n      <Box>\n        <Typography variant=\"caption\" display=\"inline\">\n          <span>Weapons : </span>\n        </Typography>\n        <Typography variant=\"body2\" display=\"inline\" color=\"primary\">\n          <span>{weaponType}</span>\n        </Typography>\n        <Typography variant=\"caption\" display=\"inline\">\n          <span> {weaponDetails}</span>\n        </Typography>\n      </Box>\n    </React.Fragment>\n  )\n}\n\nexport default EventWeapons\n","import React from 'react'\n\nimport format from 'date-fns/format'\n// import fromUnixTime from 'date-fns/fromUnixTime'\n\nimport Box from '@material-ui/core/Box'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\n\nimport EventSummary from './parts/EventSummary'\nimport EventNumbers from './parts/EventNumbers'\nimport EventTarget from './parts/EventTarget'\nimport EventWeapons from './parts/EventWeapons'\n\nconst EventDetails = (props) => {\n  const { event } = props\n\n  const formattedDate = event.date ? format(new Date(event.date), 'PPPP') : ''\n\n  return (\n    <div className=\"EventDetails\">\n      <Box p={2}>\n        <Card variant=\"outlined\">\n          <CardHeader title={event.perpetratorName} subheader={formattedDate}></CardHeader>\n          <CardContent>\n            <EventNumbers event={event} />\n            <EventTarget event={event} />\n            <EventWeapons event={event} />\n          </CardContent>\n          <CardActions>\n            <EventSummary event={event} />\n          </CardActions>\n        </Card>\n      </Box>\n    </div>\n  )\n}\n\nexport default EventDetails\n","import React from 'react'\n\nimport EventDetails from 'components/event/EventDetails'\n\nconst StateData = (props) => {\n  const { events } = props\n\n  return (\n    <div className=\"StateData\">\n      {events && events.map((event) => <EventDetails event={event} />)}\n    </div>\n  )\n}\n\nexport default StateData\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport ProjectionFlat from 'components/projections/ProjectionFlat'\n\nconst StateMap = (props) => {\n  const { selectedCountry } = props\n\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (target) => {\n    let nextPath\n\n    if (target.type === 'COUNTRY') {\n      nextPath = `/country/${target.id}`\n    } else if (target.type === 'STATE') {\n      nextPath = `/country/${selectedCountry.id}/state/${target.id}`\n    } else if (target.type === 'CITY') {\n      nextPath = `/country/${selectedCountry.id}/city/${target.id}`\n    }\n\n    setLocation({ nextPath })\n  }\n\n  return (\n    <React.Fragment>\n      <ProjectionFlat {...props} onSelection={handleSelection} smallMarkers={true} />\n    </React.Fragment>\n  )\n}\n\nexport default StateMap\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Projection3D from 'components/projections/Projection3D'\n\nconst CountryGlobe = (props) => {\n  const { selectedCountry } = props\n\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (target) => {\n    let nextPath\n\n    if (target.type === 'COUNTRY') {\n      nextPath = `/country/${target.id}`\n    } else if (target.type === 'STATE') {\n      nextPath = `/country/${selectedCountry.id}/state/${target.id}`\n    } else if (target.type === 'CITY') {\n      nextPath = `/country/${selectedCountry.id}/city/${target.id}`\n    }\n\n    setLocation({ nextPath })\n  }\n\n  return (\n    <React.Fragment>\n      <Projection3D {...props} onSelection={handleSelection} smallMarkers={true} />\n    </React.Fragment>\n  )\n}\n\nexport default CountryGlobe\n","import { gql } from 'apollo-boost'\n\nconst STATE = gql`\n  query STATE($countryId: ID, $stateId: ID) {\n    viewer {\n      id\n      role\n    }\n    information {\n      countries {\n        id\n        name\n        iso3Code\n        iso2Code\n        outline\n      }\n\n      country(id: $countryId) {\n        id\n        name\n\n        outline\n\n        states {\n          id\n          name\n          hascCode\n\n          outline\n        }\n\n        state(id: $stateId) {\n          id\n          name\n          hascCode\n\n          outline\n        }\n      }\n    }\n  }\n`\n\nexport default STATE\n","import { gql } from 'apollo-boost'\n\nconst STATE_WITH_EVENTS = gql`\n  query STATE_WITH_EVENTS($countryId: ID, $stateId: ID) {\n    viewer {\n      id\n      role\n\n      events: stateEvents(id: $stateId) {\n        id\n        date\n        latitude\n        longitude\n        countryName\n        stateName\n        cityName\n        countryId\n        stateId\n        cityId\n        centerJson\n        isSuccess\n        numberKilled\n        numberWounded\n        attackType\n        attackDetails\n        targetType\n        targetDetails\n        targetNationality\n        perpetratorName\n        perpetratorMotive\n        weaponType\n        weaponDetails\n        additionalNotes\n      }\n    }\n\n    information {\n      countries {\n        id\n        name\n        iso3Code\n        iso2Code\n        outline\n      }\n\n      country(id: $countryId) {\n        id\n        name\n\n        outline\n\n        states {\n          id\n          name\n          hascCode\n\n          outline\n        }\n\n        state(id: $stateId) {\n          id\n          name\n          hascCode\n\n          outline\n        }\n      }\n    }\n  }\n`\n\nexport default STATE_WITH_EVENTS\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useParams } from 'react-router-dom'\n\nimport Box from '@material-ui/core/Box'\nimport Container from '@material-ui/core/Container'\n\nimport StateData from 'components/state/StateData'\nimport StateMap from 'components/state/StateMap'\nimport StateGlobe from 'components/state/StateGlobe'\n\nimport useParamsShow from 'hooks/useParamsShow'\nimport useParamsOverlay from 'hooks/useParamsOverlay'\n\nimport PageNavigation from 'common/PageNavigation'\n\nimport STATE from 'graphql/STATE'\nimport STATE_WITH_EVENTS from 'graphql/STATE_WITH_EVENTS'\n\nconst StatePage = () => {\n  const { countryId, stateId } = useParams()\n\n  const show = useParamsShow()\n  const overlay = useParamsOverlay()\n\n  const query = overlay === 'TERRORISM' ? STATE_WITH_EVENTS : STATE\n\n  const { loading, error, data } = useQuery(query, {\n    variables: { countryId, stateId },\n  })\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <pre>{JSON.stringify(error, null, 2)} </pre>\n\n  const { viewer, information } = data\n\n  const { events } = viewer || {}\n  const { country, countries } = information\n\n  const { states } = countries\n  const { state } = country\n\n  let display = <StateData state={state} events={events} />\n\n  if (show === 'MAP') {\n    display = (\n      <StateMap\n        countries={countries}\n        selectedCountry={country}\n        selectedState={state}\n        states={states}\n        markers={events}\n      />\n    )\n  } else if (show === 'GLOBE') {\n    display = (\n      <StateGlobe\n        countries={countries}\n        selectedCountry={country}\n        selectedState={state}\n        states={states}\n        markers={events}\n      />\n    )\n  }\n\n  return (\n    <Box className=\"StatePage full-page\">\n      <PageNavigation show={show} overlay={overlay} country={country} state={state} />\n      <Container className=\"fill-area\" maxWidth={false} disableGutters>\n        {display}\n      </Container>\n    </Box>\n  )\n}\n\nexport default StatePage\n","import React from 'react'\n\nimport EventDetails from 'components/event/EventDetails'\n\nconst CityData = (props) => {\n  const { events } = props\n\n  return (\n    <div className=\"CityData\">\n      {events && events.map((event) => <EventDetails event={event} />)}\n    </div>\n  )\n}\n\nexport default CityData\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport ProjectionFlat from 'components/projections/ProjectionFlat'\n\nconst CityMap = (props) => {\n  const { selectedCountry } = props\n\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (target) => {\n    let nextPath\n\n    if (target.type === 'COUNTRY') {\n      nextPath = `/country/${target.id}?show=map`\n    } else if (target.type === 'STATE') {\n      nextPath = `/country/${selectedCountry.id}/state/${target.id}?show=map`\n    } else if (target.type === 'CITY') {\n      nextPath = `/country/${selectedCountry.id}/city/${target.id}?show=map`\n    }\n\n    setLocation({ nextPath })\n  }\n\n  return (\n    <React.Fragment>\n      <ProjectionFlat {...props} onSelection={handleSelection} />\n    </React.Fragment>\n  )\n}\n\nexport default CityMap\n","import React from 'react'\n\nimport useLocation from 'hooks/useLocation'\n\nimport Projection3D from 'components/projections/Projection3D'\n\nconst CityGlobe = (props) => {\n  const { selectedCountry } = props\n\n  const setLocation = useLocation()[1]\n\n  const handleSelection = (target) => {\n    let nextPath\n\n    if (target.type === 'COUNTRY') {\n      nextPath = `/country/${target.id}?show=globe`\n    } else if (target.type === 'STATE') {\n      nextPath = `/country/${selectedCountry.id}/state/${target.id}?show=globe`\n    } else if (target.type === 'CITY') {\n      nextPath = `/country/${selectedCountry.id}/city/${target.id}?show=globe`\n    }\n\n    setLocation({ nextPath })\n  }\n\n  return (\n    <React.Fragment>\n      <Projection3D {...props} onSelection={handleSelection} />\n    </React.Fragment>\n  )\n}\n\nexport default CityGlobe\n","import { gql } from 'apollo-boost'\n\nconst CITY = gql`\n  query CITY($countryId: ID, $cityId: ID) {\n    viewer {\n      id\n      role\n    }\n    information {\n      countries {\n        id\n        name\n\n        outline\n      }\n\n      country(id: $countryId) {\n        id\n        name\n\n        outline\n\n        city(id: $cityId) {\n          id\n          name\n\n          outline\n        }\n      }\n    }\n  }\n`\n\nexport default CITY\n","import { gql } from 'apollo-boost'\n\nconst CITY_WITH_EVENTS = gql`\n  query CITY_WITH_EVENTS($countryId: ID, $cityId: ID) {\n    viewer {\n      id\n      role\n\n      events: cityEvents(id: $cityId) {\n        id\n        date\n        latitude\n        longitude\n        countryName\n        stateName\n        cityName\n        countryId\n        stateId\n        cityId\n        centerJson\n        isSuccess\n        numberKilled\n        numberWounded\n        attackType\n        attackDetails\n        targetType\n        targetDetails\n        targetNationality\n        perpetratorName\n        perpetratorMotive\n        weaponType\n        weaponDetails\n        additionalNotes\n      }\n    }\n\n    information {\n      countries {\n        id\n        name\n\n        outline\n      }\n\n      country(id: $countryId) {\n        id\n        name\n\n        outline\n\n        city(id: $cityId) {\n          id\n          name\n\n          outline\n        }\n      }\n    }\n  }\n`\n\nexport default CITY_WITH_EVENTS\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useParams } from 'react-router-dom'\n\nimport Box from '@material-ui/core/Box'\nimport Container from '@material-ui/core/Container'\n\nimport CityData from 'components/city/CityData'\nimport CityMap from 'components/city/CityMap'\nimport CityGlobe from 'components/city/CityGlobe'\n\nimport useParamsShow from 'hooks/useParamsShow'\nimport useParamsOverlay from 'hooks/useParamsOverlay'\n\nimport PageNavigation from 'common/PageNavigation'\n\nimport CITY from 'graphql/CITY'\nimport CITY_WITH_EVENTS from 'graphql/CITY_WITH_EVENTS'\n\nconst CityPage = () => {\n  const { countryId, cityId } = useParams()\n\n  const show = useParamsShow()\n  const overlay = useParamsOverlay()\n\n  const query = overlay === 'TERRORISM' ? CITY_WITH_EVENTS : CITY\n\n  const { loading, error, data } = useQuery(query, {\n    variables: { countryId, cityId },\n  })\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <pre>{JSON.stringify(error, null, 2)} </pre>\n\n  const { viewer, information } = data\n\n  const { events } = viewer || {}\n  const { country, countries } = information\n\n  const { cities } = countries\n  const { city } = country\n\n  let display = <CityData city={city} events={events} />\n\n  if (show === 'MAP') {\n    display = (\n      <CityMap\n        countries={countries}\n        selectedCountry={country}\n        selectedCity={city}\n        cities={cities}\n        markers={events}\n      />\n    )\n  } else if (show === 'GLOBE') {\n    display = (\n      <CityGlobe\n        countries={countries}\n        selectedCountry={country}\n        selectedCity={city}\n        cities={cities}\n        markers={events}\n      />\n    )\n  }\n\n  return (\n    <Box className=\"CityPage full-page\">\n      <PageNavigation show={show} overlay={overlay} country={country} city={city} />\n      <Container className=\"fill-area\" maxWidth={false} disableGutters>\n        {display}\n      </Container>\n    </Box>\n  )\n}\n\nexport default CityPage\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport TestPage from 'pages/TestPage'\nimport WorldPage from 'pages/WorldPage'\nimport CountryPage from 'pages/CountryPage'\nimport StatePage from 'pages/StatePage'\nimport CityPage from 'pages/CityPage'\n\nimport 'css/App.css'\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL,\n  credentials: 'include',\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <ApolloProvider client={client}>\n        <Router>\n          <Switch>\n            <Route path=\"/country/:countryId/city/:cityId\">\n              <CityPage />\n            </Route>\n            <Route path=\"/country/:countryId/state/:stateId\">\n              <StatePage />\n            </Route>\n            <Route path=\"/country/:countryId\">\n              <CountryPage />\n            </Route>\n            <Route path=\"/world\">\n              <WorldPage />\n            </Route>\n            <Route path=\"/test\">\n              <TestPage />\n            </Route>\n            <Route path=\"/\">\n              <WorldPage />\n            </Route>\n          </Switch>\n        </Router>\n      </ApolloProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// import dotenv from 'dotenv'\n\n// dotenv.config()\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}